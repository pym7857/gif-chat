extends layout

block content
  div F12를 눌러 console 탭과 network 탭을 확인하세요.
  //- '/socket.io/socket.io.js'는 socket.IO에서 클라이언트로 제공하는 스크립트입니다. 
  //- 이 스크립트를 통해 서버와 유사한 API로 웹 소켓 통신이 가능합니다.
  script(src='/socket.io/socket.io.js')
  script.
    var socket = io.connect('http://localhost:8005', {    // 서버주소에 http프로토콜을 사용한다는 점이 ws 모듈과 다릅니다.
      path: '/socket.io',                                 // (옵션1) : 이 부분이 서버의 path 옵션과 일치해야 통신이 가능합니다.
      transports: ['websocket']                           // (옵션2) : 폴링(polling)방식을 사용하지 않고, 처음부터 웹 소켓만 사용하고 싶을때 사용합니다.
    });
    socket.on('news', function (data) {       // 서버에서 보내는 news 이벤트를 받기 위해 news 이벤트 리스너를 붙여두었습니다.
      console.log(data);
      socket.emit('reply', 'Hello Node.JS');  // emit메서드로 서버에 답장을 합니다.
    });

//- [ 서버주소에 HTTP프로토콜을 사용하는 이유 ? ]
//- Socket.IO는 먼저 폴링(polling) 방식으로 서버와 연결합니다.
//- 폴링(polling)연결 후, 웹 소켓을 사용할 수 있다면 웹 소켓으로 업그레이드 합니다. 
//- 웹 소켓을 지원하지 않는 브라우저는 폴링(polling)방식으로, 지원하는 브라우저는 웹 소켓 방식으로 사용 가능한 것입니다. 


//extends layout

//block content
  div F12를 눌러 console 탭과 network 탭을 확인하세요.
  script.
    var webSocket = new WebSocket("ws://localhost:8005");   // 서버 주소의 프로토콜이 ws인 것에 주의하자.
    webSocket.onopen = function () {
      console.log('서버와 웹소켓 연결 성공!');
    }
    webSocket.onmessage = function (event) {
      console.log(event.data);
      webSocket.send('클라이언트에서 서버로 답장을 보냅니다');
    }
